       |ï»¿module draklib.server.socket;
       |import draklib.logging;
       |
       |import std.conv;
       |import std.socket;
       |
       |class ServerSocket {
       |        private const Logger logger;
       |        private InternetAddress bindAddress;
       |        private Socket socket;
       |
      1|        this(in Logger logger, string bindInterface = "0.0.0.0", ushort bindPort = 19132) {
      1|                this.logger = logger;
      1|                socket = new UdpSocket(AddressFamily.INET);
      1|                bindAddress = new InternetAddress(bindInterface, bindPort);
       |        }
       |
       |        void bind(uint sendBufferSize = 4096, uint recvBufferSize = 4096) {
      1|                socket.bind(bindAddress);
       |
0000000|                socket.setOption(SocketOptionLevel.SOCKET, SocketOption.BROADCAST, true);
0000000|                socket.setOption(SocketOptionLevel.SOCKET, SocketOption.SNDBUF, sendBufferSize);
0000000|                socket.setOption(SocketOptionLevel.SOCKET, SocketOption.RCVBUF, recvBufferSize);
0000000|                socket.blocking = false;
       |        }
       |
       |        bool recv(ref Address address, ref byte[] buffer) {
0000000|                auto length = socket.receiveFrom(buffer, SocketFlags.NONE, address);
0000000|                if(length > 0) {
0000000|                        buffer.length = length;
       |                        debug logger.logDebug("Packet IN: " ~ to!string(buffer));
0000000|                        return true;
       |                }
0000000|                buffer = null;
0000000|                return false;
       |        }
       |
       |        void send(Address address, in byte[] buffer) {
0000000|                socket.sendTo(buffer, SocketFlags.NONE, address);
       |                debug logger.logDebug("Packet OUT: " ~ to!string(buffer));
       |        }
       |
       |        void close() {
0000000|                socket.close();
       |        }
       |
       |        InternetAddress getBindAddress() {
      1|                return bindAddress;
       |        }
       |}
source/draklib/server/socket.d is 33% covered
