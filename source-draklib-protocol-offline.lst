       |ï»¿module draklib.protocol.offline;
       |import draklib.core : RakNetInfo;
       |import draklib.bytestream : ByteStream;
       |import draklib.protocol.packet;
       |
       |class OfflineConnectionRequest1 : Packet {
       |        ubyte protocolVersion = cast(ubyte) RakNetInfo.RAKNET_PROTOCOL;
       |        ushort mtuSize;
       |
       |        override {
       |                protected void _encode(ByteStream stream) {
0000000|                        stream.writeU(RakNetInfo.RAKNET_MAGIC);
0000000|                        stream.writeUByte(protocolVersion);
0000000|                        stream.write(new byte[mtuSize + 18]);
       |                }
       |                
       |                protected void _decode(ByteStream stream) {
0000000|                        stream.skip(RakNetInfo.RAKNET_MAGIC.length);
0000000|                        protocolVersion = stream.readUByte();
0000000|                        mtuSize = cast(ushort) (stream.getRemainingLength() - 18);
       |                }
       |                
       |                ubyte getID() {
0000000|                        return RakNetInfo.OFFLINE_CONNECTION_REQUEST_1;
       |                }
       |                
       |                uint getSize() {
0000000|                        return cast(uint) 18 + mtuSize;
       |                }
       |        }
       |}
       |
       |class OfflineConnectionResponse1 : Packet {
       |        long serverGUID;
       |        ushort mtu;
       |        
       |        override {
       |                protected void _encode(ByteStream stream) {
0000000|                        stream.writeU(RakNetInfo.RAKNET_MAGIC);
0000000|                        stream.writeLong(serverGUID);
0000000|                        stream.writeUShort(mtu);
       |                }
       |                
       |                protected void _decode(ByteStream stream) {
0000000|                        stream.skip(RakNetInfo.RAKNET_MAGIC.length);
0000000|                        serverGUID = stream.readLong();
0000000|                        mtu = stream.readUShort();
       |                }
       |                
       |                ubyte getID() {
0000000|                        return RakNetInfo.OFFLINE_CONNECTION_RESPONSE_1;
       |                }
       |                
       |                uint getSize() {
0000000|                        return 28;
       |                }
       |        }
       |}
       |
       |class OfflineConnectionRequest2 : Packet {
       |        string serverAddress;
       |        ushort serverPort;
       |        ushort mtu;
       |        long clientGUID;
       |        
       |        override {
       |                protected void _encode(ByteStream stream) {
0000000|                        stream.writeU(RakNetInfo.RAKNET_MAGIC);
0000000|                        stream.writeSysAddress(serverAddress, serverPort);
0000000|                        stream.writeUShort(mtu);
0000000|                        stream.writeLong(clientGUID);
       |                }
       |                
       |                protected void _decode(ByteStream stream) {
0000000|                        stream.skip(RakNetInfo.RAKNET_MAGIC.length);
0000000|                        stream.readSysAddress(serverAddress, serverPort);
0000000|                        mtu = stream.readUShort();
0000000|                        clientGUID = stream.readLong();
       |                }
       |                
       |                ubyte getID() {
0000000|                        return RakNetInfo.OFFLINE_CONNECTION_REQUEST_2;
       |                }
       |                
       |                uint getSize() {
0000000|                        return 34;
       |                }
       |        }
       |}
       |
       |class OfflineConnectionResponse2 : Packet {
       |        long serverGUID;
       |        string clientAddress;
       |        ushort clientPort;
       |        ushort mtu;
       |        bool encryptionEnabled;
       |        
       |        override {
       |                protected void _encode(ByteStream stream) {
0000000|                        stream.writeU(RakNetInfo.RAKNET_MAGIC);
0000000|                        stream.writeLong(serverGUID);
0000000|                        stream.writeSysAddress(clientAddress, clientPort);
0000000|                        stream.writeUShort(mtu);
0000000|                        stream.writeByte(encryptionEnabled ? 1 : 0);
       |                }
       |                
       |                protected void _decode(ByteStream stream) {
0000000|                        stream.skip(RakNetInfo.RAKNET_MAGIC.length);
0000000|                        serverGUID = stream.readLong();
0000000|                        stream.readSysAddress(clientAddress, clientPort);
0000000|                        mtu = stream.readUShort();
0000000|                        encryptionEnabled = stream.readByte() > 0;
       |                }
       |                
       |                ubyte getID() {
0000000|                        return RakNetInfo.OFFLINE_CONNECTION_RESPONSE_2;
       |                }
       |                
       |                uint getSize() {
0000000|                        return 30;
       |                }
       |        }
       |}
source/draklib/protocol/offline.d is 0% covered
